1) Array of Structures:
	> Array is collection of same data type. We can declare Array of structure where each element of array is of struct type. Array of struct can be declared as :
	 struct student stu[10]; Here stu is an array of 10 elements, each of which is a struct of type struct student.
	> To access individual members of these struct we will use dot operator
	  stu[0].name stu[0].rollno stu[0].mark
	  stu[1].name stu[1].rollno stu[1].mark
    
	  stu[9].name stu[9].rollno stu[9].mark
	> All the structure of array are stored in consecutive memory locations.
	> An array of structure can be initialized as:
          struct student stuarr[3] = {
					{"Anjali", 12, 98},
					{"UnniMolae", 13, 98},
					{"Kunju", 14, 98}
				     };
	  Inner pair of braces are optional if all the iniatizers are present in list.

2) Array within structure:
	> We can have array as a member of structure. 
		struct student{
			char name[10];
			int rollno;
			int submark[4];
		      };
	stu.submark[0] - Denotes the mark of student in first subject
	stu.submark[1] - Denotes the mark of student in second subject
	stu.name[0] - Denotes the first char of the name member
	stu.name[4] - Denotes the fifth char of the name member

	If stuarr is an array of size 10 of type struct student then 
	stuarr[0].submark[0] - Denotes the mark of first student in first subject
	stuarr[4].submark[4] - Denotes the mark of fifth student in second subject

3)Nested Structures(Structure within Structure)
	> The member of structure can be of any data type including another structure type i.e we can include a structure within another structure. A structure variable can be member of another structure. This is called nesting of structure.
	> Example of nested structure:
		struct student{
			char name[10];
			int rollno;
			struct date{
					int day;	
					int month;
					int year;
				   }birthdate;
			float marks;
		      }stu1,stu2;

		We can access members of inner structure as:

		stu1.birthdate.day = day of birthdate of stu1
		stu1.birthdate.month = month of birthdate of stu1
		stu1.birthdate.year = year of birthdate of stu1
		stu2.birthdate.day = day of birthdate of stu2
	> We could have define the inner stucture out side and declare its variable  inside the main structure. But if we define inner struct outside it should be always before the definition of main struct or outer struct,
			struct date{
					int day;	
					int month;
					int year;
				   }birthdate;
	
			struct student{
			char name[10];
			int rollno;
			struct date birthdate;
			float marks;
	      }stu1,stu2;

	> The advantage of defining outside is that we can declare variable of date type anywhere also. REUSABILITY. Suppose we define structure teacher, then we can declare variable of date structure inside it as
			struct teacher{	
					char name[20];
					int age;		
					float salary;	
					struct date bithdate, joindate;
					}t1,t2;
	> Nested structure may also be initialized at the time of declaration:
			struct teacher t1 = {"Mukesh", 49, 80000, {8,12,1980}, {1,7,2000}}};
        
        > Nesting of a structure within itself is not valid.
			struct person{
					char name[20];
					int age;
					float height;
					struct person father; /* Invalid */
					}emp;
3) Pointer to Structure:
	> Pointer to structure hold starting address of a structure variable.
	  struct student{
			char name[10];
			int rollno;
			float mark;
		      };
	  struct student stu, *ptr;
 	  Here ptr is pointer variable that can point to a variable of type struct student.
	  so ptr can point to stu by
	  ptr = &stu;
	 > There are two ways of  accessing the member of structure through the structure pointer.
	   We know ptr is pointer to structure, so by dereferncing it we can get the content of structure variable. Hence *ptr will give the content of stu. So to access the member of struct variable stu we can write
	  (*ptr).name
	  (*ptr).rollno
	  (*ptr).mark
	  Here parentheses are necessary becauz dot operator has higher precedence than *opearator.
	> The above syntax is confusing so c provided arrow operator. We can acess member as ->
	  ptr -> name
	  ptr -> rollno
	  ptr -> mark
	  The arrow operator as same precedence as dot operator and it is also associative fro left to write.
        > We can also have pointer that point to individual member of structure variable. For example:
	  int *p = &stu.rollno;
	  float *ptr = &stu.marks;
          Expression &stu.mark is equivalent to &(stu.mark) becauz precedence of dot operator is more than that of address operator.

4) Pointers within structure:
	> Pointer can be used as member of stucture.
	  struct student {
				char name[20];
				int *ptrmem;
			 };
          struct student stu, *stuptr = &stu;
          Here ptrmem is pointer to int and its member of structure student.
 
	> To access value of ptrmem, we will write
	  stu.ptrmem, (*stuptr).ptrmem, stuptr->ptrmem

	> To access value pointed to by stu.ptrmem, we will write
	  *stu.ptrmem or *stuptr->ptrmem
	  Since the priority is dot and arrow operartor is more than that of derefernce operatore.
	  *stu.ptrmem is equivalent to *(stu.ptrmem) or *stuptr->ptrmem is equivalent to *(stuptr->ptrmem)


 	  

